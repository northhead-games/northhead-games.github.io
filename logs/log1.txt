ID log1
TITLE Log 1 - Renderer Plumbing
DATE 28 April, 2023

Hi again, if you're reading this, that means that I've put out a second blog post and haven't immediately given up, so I'm going to call that a win.  My friend Chin wants me to create an RSS feed for this blog, so look out for that.  I'm also thinking about making an email list so I can send out alerts to people who really need to know exactly when the new Northhead Games<sup>TM</sup> Incorporated LLC Â© is up.  Anyways, this week I want to talk about the our renderer, as that was the primary focus of this week.

Because we're writing this system from more or less the groundup in C{1}, we also need to write a renderer ourselves.  I don't want to go down a rathole trying to write a general purpose renderer, so my goal for the renderer is to set up something that works for what we're trying to do right now, and then worry about what we might need later when we need it later.  For now, my goal was to have the ability to load arbitrary `.obj` models with texture and normal maps, be able to transform them around world space, and have some basic Phong shading{2} with a directional light.  As I showed in the previous post, our renderer was already capable of loading a model and transforming it, but not much else.  Before adding new features however, I took some time to revise the renderer's interface to the game code.

Previously, each action{3} the renderer could perform was called via a function in the game code.  While this was fine for testing that the game code could in fact call the renderer, and that the renderer was working, it presents a central problem:  the game code must wait on the renderer any time it calls down to it.  A secondary problem with this approach is that it does not lend itself to being parallelized later, as the renderer code would become tightly intertwined with the game logic.  Instead, we've switched to using a command queue system, to pass messages to and from the renderer.

The command queue is super straightforward.  During the game code's execution, the code can make a call to the platform layer (Plover) to push a render command into the queue.  The queue itself is just a fixed size circular buffer, with an `assert` to tell me if messages start getting overwritten.  The commands themselves are a tagged union, as that seemed like the most natural way to store the data, as opposed to some sort of template craziness.  The outgoing message queue that the renderer uses to send messages back to the game code is implemented in exactly the same way.  Currently, these queues are not thread safe, but adding a simple mutex lock{4} when rendering gets spun out onto a separate thread would be trivial.  Now onto the new renderer features that got added this week.

The next step after rejiggering the renderer API was implementing a basic lighting model.  We have plans for fancier stuff, but for testing and getting things up and running quickly I've done a really basic Phong type shader.  I'm not really going to go over the specifics, because this sort of lighting has been done to death, but if you're not familiar the tutorials at <a href="https://learnopengl.com/">learnopengl.com</a> are excellent.  However, I did encounter a few interesting issues worth talking about, and some worth showing because they have an appealing aesthetic, like this cool but totally screwed up shader test:

IMAGE images/log1_glitch1.png Glitchy render

While most of the implementation of the current lighting model went off without a hitch, I did spend an inordinate amount of time trying to figure out why the hell my normal maps were getting cloberred in the shader, like in this screenshot of my precious artefact with a stone texture on it:

IMAGE images/log1_ArtefactLightingGlitch.png Messed up normals on artefact

On first blush, it might look okay, but if you look a little more carefully you'll see really strange discontinuities in the lighting.  The problem ended up being that the normal map, which looks like this:

IMAGE images/log1_StoneNormal.png Messed up normals on artefact

was being interpreted in sRGB.  sRGB, or standard RGB, is a colorspace that maps the color values in our input textures to a value more appropriate to how our brains perceive color.  The curve of this mapping is as follows:

IMAGE images/log1_LinearVsSrgb.webp Linear vs SRGB curve

While this mapping is great for our color (or albedo) textures{5}, it skews the normal vectors defined in the normal map, creating inaccurate normals in the final render of the object, as shown in this diagram:

IMAGE images/log1_NormalSkewDiagram.jpg Diagram of normal skew

With that issue resolved, we can now render our models with normal and specular maps, which looks pretty good in my opinion:

<video loop autoplay>
<source src="videos/Log1Video.webm" type="video/webm">
</video>

Anyways, that's all for this week.  The plan is to have Yigit write an article about the asset streaming system we're working on, so keep an eye out for that.  Also I made a <a href="https://twitter.com/northheadgames">Twitter</a>, so feel free to go follow that.

- Oliver

NOTE 1 It's technically written in C++, but we use C++ features very sparingly.  We're not religious about it, but in general we use: function/operator overloading, method syntax<sup><a href="#log1_note1a">a</a></sup>, and references<sup><a href="#log1_note1b">b</a></sup>.  We stay away from heavy usage of templates and also don't really use virtual methods/OOP stuff.  As much fun as arcane debates about programming language features are, our main focus is writing code that executes instructions on the CPU/GPU :).

SUBNOTE 1 When functionality is really tightly coupled with data
SUBNOTE 2 Mostly because I find `ptr->member` syntax pretty ugly and needing to change the pointer is pretty rare.

NOTE 2 Phong shading is a shading method that uses an ambient, diffuse, and specular component to figure out the intensity of the lighting of each pixel.  It's a really old technique, but it's still very capable of creating nicely shaded models, particularly because we'll be going for a more stylized look and won't need the physical accuracy that more modern approaches provide.
NOTE 3 Load a model, transform a model, create a material, etc.
NOTE 4 Or potentially a more efficient concurrency mechanism like a fine-grained lock or non-blocking if it were warranted. As I'm writing this I should actually be studying for my concurrency exam tomorrow, so I could really overcomplicate things here if I wanted to.
NOTE 5 Colors tend to look washed out and lack depth with a linear mapping.
